<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\controllers\base;

use app\models\Items;
use app\models\Units;
use app\models\MainUnits;
use app\models\SubUnits;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use dmstr\bootstrap\Tabs;
use yii\data\ActiveDataProvider;
use yii;
/**
* ItemsController implements the CRUD actions for Items model.
*/
class ItemsController extends Controller
{
	public $layout = "items";
	/**
	* @var boolean whether to enable CSRF validation for the actions in this controller.
	* CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
	*/
	public $enableCsrfValidation = false;


	/**
	* Lists all Items models.
	* @return mixed
	*/
	public function actionIndex(){
		$units = Units::find()->all();
		return $this->render('index', ['units'=>$units]);
	}
	public function actionAll(){
		$model = Items::find()->all();
		Yii::$app->response->format = yii\web\Response::FORMAT_JSON;
		Yii::$app->response->statusCode = 200;
		return Yii::$app->response->data = ["data"=>$model];
	}
	/**
	* Displays a single Items model.
	* @param integer $id
	*
	* @return mixed
	*/
	public function actionView($id)
	{
		$model = $this->findModel($id);
		Yii::$app->response->format = yii\web\Response::FORMAT_JSON;
		Yii::$app->response->statusCode = 200;
		return Yii::$app->response->data = $model;
	}

	/**
	* Creates a new Items model.
	* If creation is successful, the browser will be redirected to the 'view' page.
	* @return mixed
	*/
	public function actionCreate()
	{
		$model = new Items;
		$main_unit = new MainUnits;
		Yii::$app->response->format = yii\web\Response::FORMAT_JSON;
		if (Yii::$app->request->isPost ) {
			$model->price = Yii::$app->request->post()["price"];
			$model->item_name = Yii::$app->request->post()["item_name"];
			$model->less_quantity = Yii::$app->request->post()["less_quantity"];
			if (trim(Yii::$app->request->post()["item_code"]) == "") {
				$model->item_code = time();
			}
			$main_unit->units_id = Yii::$app->request->post()["main_unit_id"];
			if ($main_unit->save()) {
				$last_unit = Yii::$app->request->post()["main_unit_id"];
				$model->main_unit_id = $main_unit->id;
				$quantity=Yii::$app->request->post()["main-quantity"];
				if (Yii::$app->request->post()["counter"]) {
					for ($i=1; $i <= Yii::$app->request->post()["counter"] ; $i++) { 
						$sub_units = new SubUnits;
						if (Yii::$app->request->post()["sub-unit-".$i]) {
							$sub_units->units_id = Yii::$app->request->post()["sub-unit-".$i];
							$sub_units->main_unit_id = $main_unit->id;
							$sub_units->main_unit_quantity = Yii::$app->request->post()["sub-units-quantity-".$i];
							$quantity = $quantity*Yii::$app->request->post()["sub-units-quantity-".$i]+Yii::$app->request->post()["sub-units-item-quantity-".$i];
							$sub_units->save();
						}
					}
				}
				
				$model->quantity = $quantity ;
				if ($model->save()) {
					Yii::$app->response->statusCode = 200;
					return Yii::$app->response->data = ['id' => $model->id];
				}
			}
		}
		return Yii::$app->response->statusCode = 400;
	}
	/**
	* Updates an existing Items model.
	* If update is successful, the browser will be redirected to the 'view' page.
	* @param integer $id
	* @return mixed
	*/
	public function actionUpdate($id)
	{
		$model = $this->findModel($id);
		Yii::$app->response->format = yii\web\Response::FORMAT_JSON;
		if (Yii::$app->request->isPost ) {
			
			foreach (Yii::$app->request->post() as $key => $value) {
				if ($key == "main_unit_id" ) {
					$model->{$key} = 1;
					continue ;
				}
				if ($key == "item_code" && trim($value) == "") {
					$model->{$key} = time();
					continue ;
				}
				$model->{$key} = $value;
			}
			if ($model->save()) {

				Yii::$app->response->statusCode = 200;
				return Yii::$app->response->data = ['id' => $model->id];
			}
		}
	}

	/**
	* Deletes an existing Items model.
	* If deletion is successful, the server will return 200 else will return 400.
	* @param integer $id
	* @return status code
	*/
	public function actionDelete($id)
	{
		if (Yii::$app->request->isPost ) {
				if ($this->findModel($id)->delete()) {
					return Yii::$app->response->statusCode = 200;
				}
		}
		return Yii::$app->response->statusCode = 400;
	}
	/**
	* Gets The Item's units 
	* If the item found it will return the units as json else will return 400
	* @return Json Or Status code
	**/
	public function actionUnits(){
		Yii::$app->response->format = yii\web\Response::FORMAT_JSON;
		if (Yii::$app->request->isPost ) {
			$model = Items::find()->where(["item_code"=>Yii::$app->request->post()["item_code"]])->one();
			if ($model) {
				$main_units = MainUnits::findOne($model->main_unit_id);
				$sub_units = SubUnits::find()->where(["main_unit_id"=>$main_units->id])->all();
				$all_units = [];
				$units = Units::findOne($main_units->units_id);
				$all_units[$units->id] = ["id"=>$units->id,"name"=>$units->unit_name,"type"=>"main"];
				foreach ($sub_units as $key ) {
					$units = Units::findOne($key->units_id);
					$all_units[$units->id] = ["id"=>$units->id,"sub_id"=>$key->id,"name"=>$units->unit_name,"type"=>"sub","main-quantity"=>$key->main_unit_quantity];
				}
				
				return $all_units;
			}
		}
		return Yii::$app->response->statusCode = 400;
	}
	public function actionSearch(){
		Yii::$app->response->format = yii\web\Response::FORMAT_JSON;
		if (Yii::$app->request->isGet) {
			$term = Yii::$app->request->get()['term'];
			$query = (new \yii\db\Query())->select('*')->from('items')
			->where(["like" , "item_code" , $term ])
			->orWhere(["like" , "item_name" , $term ])->all();
			if ($query) {
				Yii::$app->response->statusCode = 200;
				return $query;
			}
			return Yii::$app->response->statusCode = 200;
		}
	}
	/**
	* Finds the Items model based on its primary key value.
	* If the model is not found, a 404 HTTP exception will be thrown.
	* @param integer $id
	* @return Items the loaded model
	* @throws HttpException if the model cannot be found
	*/
	protected function findModel($id)
	{
		if (($model = Items::findOne($id)) !== null) {
			return $model;
		} else {
				throw new HttpException(404, 'The requested page does not exist.');
		}
	}
}
