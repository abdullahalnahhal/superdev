<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\controllers\base;

use app\models\PurchasingBills;
use app\models\PurchasingBillsDetails;
use app\models\Suppliers;
use app\models\SuppliersAccounts;
use app\models\Items;
use app\models\MainUnits;
use app\models\SubUnits;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use dmstr\bootstrap\Tabs;
use yii\data\ActiveDataProvider;
use yii;
/**
* PurchasingBillsController implements the CRUD actions for PurchasingBills model.
*/
class PurchasingBillsController extends Controller
{
	/**
	* @var boolean whether to enable CSRF validation for the actions in this controller.
	* CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
	*/
	public $enableCsrfValidation = false;
	public $layout = "purchasing";

	/**
	* Lists all PurchasingBills models.
	* @return mixed
	*/
	public function actionIndex()
	{
		return $this->render('index');
	}
	public function actionAll(){
		$rows = (new \yii\db\Query())
			    ->select(['purchasing_bills.*', 'suppliers.name as supplier'])
			    ->from('purchasing_bills')
			    ->join('LEFT JOIN','suppliers','suppliers.id = purchasing_bills.suppliers_id')
			    ->all();
		Yii::$app->response->format = yii\web\Response::FORMAT_JSON;
		Yii::$app->response->statusCode = 200;
		return Yii::$app->response->data = ["data"=>$rows];
	}
	public function actionNew()
	{
		$suppliers = new Suppliers;
		$suppliers = $suppliers::find()->all();
		return $this->render('new', ["suppliers"=>$suppliers]);
	}

	/**
	* Displays a single PurchasingBills model.
	* @param integer $id
	*
	* @return mixed
	*/
	public function actionView($id)
	{
	\Yii::$app->session['__crudReturnUrl'] = Url::previous();
	Url::remember();
	Tabs::rememberActiveState();

	return $this->render('view', [
	'model' => $this->findModel($id),
	]);
	}

	/**
	* Creates a new PurchasingBills model.
	* If creation is successful, the browser will be redirected to the 'view' page.
	* @return mixed
	*/
	public function actionCreate()
	{
		Yii::$app->response->format = yii\web\Response::FORMAT_JSON;
		if (Yii::$app->request->isPost ){
			$post = Yii::$app->request->post();
			$status = false ;
			$model = new PurchasingBills();
			$suppliers = Suppliers::find()->where(["supplier_code"=>$post['suppliers']])->all();
			$suppliers_accounts = new SuppliersAccounts;
			$date = date("Y-m-d");
			if (!isset($post["bill_code"])||trim($post["bill_code"]) == "") {
				$post["bill_code"] = time();
			}
			$cost = $post["cost"];
			if (!isset($post["counter"])) {
					$post["counter"] = 0;
				}
			if ($post["counter"] && $post["counter"] != 0) {
				for ($i=1; $i <= $post["counter"]; $i++) { 
					if (isset($post["cost-".$i])) {
						$cost = $cost + $post["cost-".$i] ;
					}
					
				}
			}
			$model->suppliers_id = $suppliers[0]->id;
			$model->bill_code = $post["bill_code"];
			$model->total_cost = $cost;
			$model->date = $date;
			if ($model->save()) {
				$suppliers_accounts->suppliers_id = $model->suppliers_id ;
				$suppliers_accounts->dept = $cost;
				$suppliers_accounts->date = $date;
				$suppliers_accounts->save();
				
					for ($i=0; $i <= $post["counter"]; $i++) {
						$details = new PurchasingBillsDetails();
						$details->purchasing_bills_id = $model->id;
						if ($i==0) {
							$item_code = $post["item_code"];
							$quantity = $post["quantity"];
							$cost = $post["cost"];
							$unit = $post["units"];
						}
						else{
							if (isset($post["item_code-".$i])) {
								$item_code = $post["item_code-".$i];
							}
							if (isset($post["quantity-".$i])) {
								$quantity = $post["quantity-".$i];
							}
							if (isset($post["cost-".$i])) {
								$cost = $post["cost-".$i];
							}
							if (isset($post["units-".$i])) {
								$unit = $post["units-".$i];
							}
						}
						$items = Items::find()->where(["item_code"=>$item_code])->all();
						$details->items_id = $items[0]->id;
						$details->cost = $cost ;

						$main_unit = MainUnits::findOne($items[0]->main_unit_id);
						$sub_units = SubUnits::find()->where(["main_unit_id"=>$items[0]->main_unit_id])->orderBy("id")->all();

						if ($main_unit->id == $unit) {
							foreach ($sub_units as $key) {
								$quantity = $quantity*$key->main_unit_quantity;
							}
						}
						else{
							foreach ($sub_units as $key) {
								$start = 0;
								if ($key->units_id == $unit) {
									$start = 1;
								}
								if($start>1){
									$quantity = $quantity*$key->main_unit_quantity;
								}
								$start++;
							}
						}
						$details->quantity = $quantity ;
						if($details->save()){
							$items = Items::findOne($items[0]->id);
							$items->quantity = $items->quantity + $quantity;
							if ($items->save()) {
								$status = true;
							}
							else{
								$status = false;
							}
						}
					}
				
			}
		}
		if ($status) {
			Yii::$app->response->statusCode = 200;
			return ["id"=>$model->id];
		}
		return Yii::$app->response->statusCode = 400;
	}

	/**
	* Updates an existing PurchasingBills model.
	* If update is successful, the browser will be redirected to the 'view' page.
	* @param integer $id
	* @return mixed
	*/
	public function actionUpdate($id)
	{
	$model = $this->findModel($id);

	if ($model->load($_POST) && $model->save()) {
	return $this->redirect(Url::previous());
	} else {
	return $this->render('update', [
	'model' => $model,
	]);
	}
	}

	/**
	* Deletes an existing PurchasingBills model.
	* If deletion is successful, the browser will be redirected to the 'index' page.
	* @param integer $id
	* @return mixed
	*/
	public function actionDelete($id)
	{
		if (Yii::$app->request->isPost ) {
				$details = PurchasingBillsDetails::deleteAll(['purchasing_bills_id' => $id]);
				if ($this->findModel($id)->delete()) {
					return Yii::$app->response->statusCode = 200;
				}
		}
		return Yii::$app->response->statusCode = 400;
	}


	/**
	* Finds the PurchasingBills model based on its primary key value.
	* If the model is not found, a 404 HTTP exception will be thrown.
	* @param integer $id
	* @return PurchasingBills the loaded model
	* @throws HttpException if the model cannot be found
	*/
	protected function findModel($id)
	{
	if (($model = PurchasingBills::findOne($id)) !== null) {
	return $model;
	} else {
	throw new HttpException(404, 'The requested page does not exist.');
	}
	}
}
