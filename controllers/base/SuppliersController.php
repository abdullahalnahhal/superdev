<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\controllers\base;

use app\models\Suppliers;
use app\models\SuppliersAccounts;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use dmstr\bootstrap\Tabs;
use yii\data\ActiveDataProvider;
use yii;
/**
* SuppliersController implements the CRUD actions for Suppliers model.
*/
class SuppliersController extends Controller
{
	/**
	* @var boolean whether to enable CSRF validation for the actions in this controller.
	* CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
	*/
	public $enableCsrfValidation = false;
	public $layout = "purchasing";

	/**
	* Lists all Suppliers models.
	* @return mixed
	*/
	public function actionIndex()
	{
		return $this->render('index', []);
	}
	public function actionAll(){
		$model = Suppliers::find()->all();
		Yii::$app->response->format = yii\web\Response::FORMAT_JSON;
		Yii::$app->response->statusCode = 200;
		if ($model) {
			foreach ($model as $key ) {
				$command = Yii::$app->db->createCommand("SELECT sum(dept) FROM suppliers_accounts WHERE suppliers_id = $key->id ");
				$dept = $command->queryScalar();
				$command = Yii::$app->db->createCommand("SELECT sum(credit) FROM suppliers_accounts WHERE suppliers_id = $key->id ");
				$credit = $command->queryScalar();
				$balance = $dept - $credit ;
				$suppliers[] = ["id"=> $key->id , "name"=>$key->name , "supplier_code"=>$key->supplier_code , "Address"=> $key->Address , "company"=>$key->company , "balance"=>$balance];
			}
		}
		else{
			$suppliers=[[]];
		}
		return Yii::$app->response->data = ["data"=>$suppliers];
	}
	/**
	* Displays a single Suppliers model.
	* @param integer $id
	*
	* @return mixed
	*/
	public function actionView($id)
	{
		$model = $this->findModel($id);
		Yii::$app->response->format = yii\web\Response::FORMAT_JSON;
		Yii::$app->response->statusCode = 200;
		$command = Yii::$app->db->createCommand("SELECT sum(dept) FROM suppliers_accounts WHERE suppliers_id = $id ");
		$dept = $command->queryScalar();
		$command = Yii::$app->db->createCommand("SELECT sum(credit) FROM suppliers_accounts WHERE suppliers_id = $id ");
		$credit = $command->queryScalar();
		$balance = $dept - $credit ;
		$supplier = ["id"=> $model->id , "name"=>$model->name , "supplier_code"=>$model->supplier_code , "Address"=> $model->Address , "company"=>$model->company , "balance"=>$balance];

		return Yii::$app->response->data = $supplier;
	}

	/**
	* Creates a new Suppliers model.
	* If creation is successful, the browser will be redirected to the 'view' page.
	* @return mixed
	*/
	public function actionCreate()
	{
		$model = new Suppliers;
		$suppliers_accounts = new SuppliersAccounts;
		Yii::$app->response->format = yii\web\Response::FORMAT_JSON;
		if (Yii::$app->request->isPost ) {
			if (Yii::$app->request->post()["name"] && trim(Yii::$app->request->post()["name"])!="") {
				$model->name = Yii::$app->request->post()["name"];
			}
			if (Yii::$app->request->post()["Address"] && trim(Yii::$app->request->post()["Address"])!="") {
				$model->Address = Yii::$app->request->post()["Address"];
			}
			if (Yii::$app->request->post()["company"] && trim(Yii::$app->request->post()["company"])!="") {
				$model->company = Yii::$app->request->post()["company"];
			}
			if (Yii::$app->request->post()["supplier_code"] && trim(Yii::$app->request->post()["supplier_code"])!="") {
				$model->supplier_code = Yii::$app->request->post()["supplier_code"];
			}
			else{
				$model->supplier_code = time();
			}
			if (Yii::$app->request->post()["balance"] && trim(Yii::$app->request->post()["balance"])!="") {
				$balance = $model->balance = Yii::$app->request->post()["balance"];
			}
			else{
				$balance = 0;
			}
			if ($model->save()) {
				$suppliers_accounts->suppliers_id = $model->id;
				$suppliers_accounts->date = date("Y-m-d");
				if ($balance > 0){
					$suppliers_accounts->dept = Yii::$app->request->post()["balance"];
				}else{
					$suppliers_accounts->credit = Yii::$app->request->post()["balance"] * (-1);
				}
				if ($suppliers_accounts->save()) {
					Yii::$app->response->statusCode = 200;
					return Yii::$app->response->data = ['id' => $model->id];
				}
			}
		}
		return Yii::$app->response->statusCode = 400;		
	}

	/**
	* Updates an existing Suppliers model.
	* If update is successful, the browser will be redirected to the 'view' page.
	* @param integer $id
	* @return mixed
	*/
	public function actionUpdate($id)
	{
		$model = $this->findModel($id);
		$suppliers_accounts = new SuppliersAccounts;
		Yii::$app->response->format = yii\web\Response::FORMAT_JSON;
		if (Yii::$app->request->isPost ) {
			$model->name = Yii::$app->request->post()["name"];
			$model->Address = Yii::$app->request->post()["address"];
			$model->company = Yii::$app->request->post()["company"];
			if (trim(Yii::$app->request->post()["supplier_code"]) == "") {
				$model->supplier_code = time();
			}
			$balance = Yii::$app->request->post()["balance"];
			if ($model->save()) {
				Yii::$app->response->statusCode = 200;
				return Yii::$app->response->data = ['id' => $model->id];
			}
		}
		return Yii::$app->response->statusCode = 400;	
	}

/**
* Deletes an existing Suppliers model.
* If deletion is successful, the browser will be redirected to the 'index' page.
* @param integer $id
* @return mixed
*/
public function actionDelete($id)
{
try {
$this->findModel($id)->delete();
} catch (\Exception $e) {
$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
\Yii::$app->getSession()->addFlash('error', $msg);
return $this->redirect(Url::previous());
}

// TODO: improve detection
$isPivot = strstr('$id',',');
if ($isPivot == true) {
return $this->redirect(Url::previous());
} elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
Url::remember(null);
$url = \Yii::$app->session['__crudReturnUrl'];
\Yii::$app->session['__crudReturnUrl'] = null;

return $this->redirect($url);
} else {
return $this->redirect(['index']);
}
}

/**
* Finds the Suppliers model based on its primary key value.
* If the model is not found, a 404 HTTP exception will be thrown.
* @param integer $id
* @return Suppliers the loaded model
* @throws HttpException if the model cannot be found
*/
protected function findModel($id)
{
if (($model = Suppliers::findOne($id)) !== null) {
return $model;
} else {
throw new HttpException(404, 'The requested page does not exist.');
}
}
}
